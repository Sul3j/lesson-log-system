// <auto-generated />
using System;
using LessonLogAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LessonLogAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 5, 13, 59, 21, 41, DateTimeKind.Local).AddTicks(1700),
                            UserId = 31
                        });
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EducatorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId")
                        .IsUnique()
                        .HasFilter("[EducatorId] IS NOT NULL");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<int>("GradeWeight")
                        .HasColumnType("int");

                    b.Property<int?>("Percent")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LessonHourId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LessonHourId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.LessonHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LessonHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            From = "8:00",
                            To = "8:45"
                        },
                        new
                        {
                            Id = 2,
                            From = "8:50",
                            To = "9:35"
                        },
                        new
                        {
                            Id = 3,
                            From = "9:45",
                            To = "10:30"
                        },
                        new
                        {
                            Id = 4,
                            From = "10:40",
                            To = "11:25"
                        },
                        new
                        {
                            Id = 5,
                            From = "11:35",
                            To = "12:20"
                        },
                        new
                        {
                            Id = 6,
                            From = "12:40",
                            To = "13:25"
                        },
                        new
                        {
                            Id = 7,
                            From = "13:35",
                            To = "14:20"
                        },
                        new
                        {
                            Id = 8,
                            From = "14:30",
                            To = "15:15"
                        },
                        new
                        {
                            Id = 9,
                            From = "15:25",
                            To = "16:10"
                        },
                        new
                        {
                            Id = 10,
                            From = "16:20",
                            To = "17:05"
                        },
                        new
                        {
                            Id = 11,
                            From = "17:15",
                            To = "18:00"
                        },
                        new
                        {
                            Id = 12,
                            From = "18:10",
                            To = "18:55"
                        },
                        new
                        {
                            Id = 13,
                            From = "19:05",
                            To = "19:50"
                        });
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Message", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<string>("FromName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Group")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("To")
                        .HasColumnType("int");

                    b.Property<string>("ToName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Pesel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TutorId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TutorId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.TimetableLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonHourId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("LessonHourId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TimetableLessons");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Tutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatConnectionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ResetPasswordExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "susan24@example.org",
                            FirstName = "Carrie",
                            LastName = "Williams",
                            Password = "v8j2wsquOQwmFRn3mXO0F24ktkESAq/NeOSgveeLpXNPxn3K",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 2,
                            Email = "nealdaniel@example.org",
                            FirstName = "Audrey",
                            LastName = "Pineda",
                            Password = "90vPcYsdu9t4cDUcg6GBvn5gFNK2takISLoU0W9tAkTaxAJ4",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 3,
                            Email = "paulwise@example.com",
                            FirstName = "Grace",
                            LastName = "Wilson",
                            Password = "Dt3r07HR5ba4GbJ2xfKYXqBl843EJ9yqF1m8/6ReUesUFUW6",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 4,
                            Email = "laurasharp@example.org",
                            FirstName = "Mary",
                            LastName = "Clark",
                            Password = "rozJ7VveYW9jXRJaxN47yWBSQeMFX/fptJ+WW5zVWkFAIOF4",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 5,
                            Email = "richard38@example.net",
                            FirstName = "Mary",
                            LastName = "Lowe",
                            Password = "P1W2P3CAt+1R4yz4pkZ3GgInaky67QB5q8I4/ate8gchGJb1",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 6,
                            Email = "garrett04@example.net",
                            FirstName = "Patricia",
                            LastName = "Garcia",
                            Password = "Fxh9pQ8iTDqRfRa4naO5U9CYZmjHF9Tyavwh+tVeKfg7zRhX",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 7,
                            Email = "gscott@example.net",
                            FirstName = "Logan",
                            LastName = "Andrews",
                            Password = "7It2svlzUwe/pCZFbASyF9Ly8F4BuPfSR7oZR/RSoM2ErE55",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 8,
                            Email = "tyler02@example.com",
                            FirstName = "Krystal",
                            LastName = "West",
                            Password = "JMOC1qEuTETipzO1n9H4eFgNewrEhZMRONWqW5V1vyZA09xy",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 9,
                            Email = "bsanchez@example.com",
                            FirstName = "John",
                            LastName = "Weber",
                            Password = "3KZ1Ixpees9T4ps3ZK2qjtBp+YbLOD5/tHkO6scWIhYt9otm",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 10,
                            Email = "nicholashodges@example.com",
                            FirstName = "Michael",
                            LastName = "Diaz",
                            Password = "DWXpGIesZXNL1OR+uTTPHK3dv2ZluqUbcubwjXnRQznuGzhc",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 11,
                            Email = "krivera@example.org",
                            FirstName = "Benjamin",
                            LastName = "Kirby",
                            Password = "zKVjQpDgICjdzFfoQuGav9jv2WzKE87wa+Mlg2awc/zh8udw",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 12,
                            Email = "zrivera@example.org",
                            FirstName = "Elizabeth",
                            LastName = "Rosario",
                            Password = "hj+L10/gSpNfhxL2EWM8Kf9e6R/T7mTdmicvCo1Pysn+fzx+",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 13,
                            Email = "othompson@example.com",
                            FirstName = "Kristi",
                            LastName = "Allen",
                            Password = "uhl12bidUIXUO8j4WMozQUNKJAr70BuQtK9a97seJ2Pm3l9o",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 14,
                            Email = "daltonalex@example.net",
                            FirstName = "Nicholas",
                            LastName = "Holmes",
                            Password = "pbMpirOgxwprXZZyvbX7MUwE1tcD3psj43a6Q/4nVhxr53Qt",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 15,
                            Email = "collinsmiguel@example.org",
                            FirstName = "Benjamin",
                            LastName = "Braun",
                            Password = "3TFUJPjvyMQXIJeXnct6cSafGkIm1RvukQ1nQKwNLGXj3pSc",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 16,
                            Email = "mphillips@example.net",
                            FirstName = "Tamara",
                            LastName = "Gonzalez",
                            Password = "5j/rrlUJ/SyVCrRfkhZJeHG95TfgFETeRDI1OZmnuslE59lN",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 17,
                            Email = "jasonhamilton@example.net",
                            FirstName = "Margaret",
                            LastName = "Smith",
                            Password = "bM9Ff99PlWB/HDZB4txER7NnbDrL8DhYT/+ph6iTVi29xcLn",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 18,
                            Email = "wilsonkayla@example.com",
                            FirstName = "Kristina",
                            LastName = "Brown",
                            Password = "qQ1+kLzp8I0TsfsIOuHsd8yybvJELUuAKVaH66PBYF3Fjp2H",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 19,
                            Email = "shannon76@example.com",
                            FirstName = "Allison",
                            LastName = "Wilson",
                            Password = "cA7JeeeiD4ztERXjqzfIebqpu0dkBIVCVGkCgd7XkH9WhQAw",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 20,
                            Email = "jonathan75@example.com",
                            FirstName = "Valerie",
                            LastName = "Klein",
                            Password = "mfQAAXiVojQkZ2IPiSvbFjc4isJh1VdXopdaAZUvhvqOCMP8",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 21,
                            Email = "andreaharris@example.net",
                            FirstName = "Brian",
                            LastName = "Herrera",
                            Password = "Mw1ngMn/KYhB9LpCgnNFbi8yZxLPWecry0hCbY8TX2gI7Djk",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 22,
                            Email = "danielwalker@example.org",
                            FirstName = "Christina",
                            LastName = "Reeves",
                            Password = "7vzCYJd/dPeqSzb7Hnw/9E6V5hN1ul4AwI8JhDo/k5BVM3/g",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 23,
                            Email = "leeandrea@example.net",
                            FirstName = "Scott",
                            LastName = "Price",
                            Password = "+DRpDtb2GZG7BXQsm1mG42CQ0rgXRCxqd3750oS4rL8gdR4K",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 24,
                            Email = "sstevens@example.org",
                            FirstName = "Anthony",
                            LastName = "Duncan",
                            Password = "bSIXTdzi2mEJTcyC5ZNe+nyZoH/H3Jg8equER6F0wR7jGzp0",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 25,
                            Email = "brownjon@example.com",
                            FirstName = "Adam",
                            LastName = "Parker",
                            Password = "wGowCUNaYsQg13RML3WIdVmx6XRzw2EqbLytlrtKHJnfrpmu",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 26,
                            Email = "keynorma@example.com",
                            FirstName = "Gregory",
                            LastName = "Love",
                            Password = "9k6aRy0yeV6YrMxb3IfO8/aTXA3cKrjluMC6HYbWmdZwjrNj",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 27,
                            Email = "terrance01@example.org",
                            FirstName = "Kyle",
                            LastName = "Jones",
                            Password = "9JQoP4Mg1r2xIF6+APfm2gGN1P3KUgkwfqFDc7iKR5CG9WW9",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 28,
                            Email = "owensraymond@example.org",
                            FirstName = "Charles",
                            LastName = "Wolf",
                            Password = "ffLBtyszMqUlOSASNM7MZUPlou4k8y8iYl/AmJa+x/vlHg/2",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 29,
                            Email = "william21@example.org",
                            FirstName = "Angela",
                            LastName = "Rice",
                            Password = "mZPTCyLyg7OHcSstUg1Kj/AuEL4Hl7EkyLlucwz/qQX8CioN",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 30,
                            Email = "susan2454@example.org",
                            FirstName = "Raymond",
                            LastName = "Martinez",
                            Password = "eKywDAoigdLNn9K7Nd1ZV5b0gJTEDXyiJJs+rFE9LIQBL4h0",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "USER"
                        },
                        new
                        {
                            Id = 31,
                            Email = "szymon.sul3jczak@gmail.com",
                            FirstName = "Szymon",
                            LastName = "Sulejczak",
                            Password = "N34Mx5HIVfMVL9b4UfPO/+KHYI9Vh6SdTkM0R3ybs6lpAte2",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "ADMIN"
                        });
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("SubjectsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("SubjectTeacher");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Admin", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("LessonLogAPI.Models.Entities.Admin", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Attendance", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.Lesson", "Lesson")
                        .WithMany("Attendances")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LessonLogAPI.Models.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Class", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.Teacher", "Teacher")
                        .WithOne("Class")
                        .HasForeignKey("LessonLogAPI.Models.Entities.Class", "EducatorId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Grade", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LessonLogAPI.Models.Entities.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Lesson", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.Class", "Class")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LessonLogAPI.Models.Entities.LessonHour", "LessonHour")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonHourId");

                    b.HasOne("LessonLogAPI.Models.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LessonLogAPI.Models.Entities.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("LessonHour");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Student", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId");

                    b.HasOne("LessonLogAPI.Models.Entities.Tutor", "Tutor")
                        .WithMany("Students")
                        .HasForeignKey("TutorId");

                    b.HasOne("LessonLogAPI.Models.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("LessonLogAPI.Models.Entities.Student", "UserId");

                    b.Navigation("Class");

                    b.Navigation("Tutor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Teacher", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("LessonLogAPI.Models.Entities.Teacher", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.TimetableLesson", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.Class", "Class")
                        .WithMany("TimetableLessons")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LessonLogAPI.Models.Entities.Classroom", "Classroom")
                        .WithMany("TimetableLessons")
                        .HasForeignKey("ClassroomId");

                    b.HasOne("LessonLogAPI.Models.Entities.LessonHour", "LessonHour")
                        .WithMany("TimetableLessons")
                        .HasForeignKey("LessonHourId");

                    b.HasOne("LessonLogAPI.Models.Entities.Subject", "Subject")
                        .WithMany("TimetableLessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LessonLogAPI.Models.Entities.Teacher", "Teacher")
                        .WithMany("TimetableLessons")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Class");

                    b.Navigation("Classroom");

                    b.Navigation("LessonHour");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Tutor", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.User", "User")
                        .WithOne("Tutor")
                        .HasForeignKey("LessonLogAPI.Models.Entities.Tutor", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.HasOne("LessonLogAPI.Models.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonLogAPI.Models.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Class", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Students");

                    b.Navigation("TimetableLessons");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Classroom", b =>
                {
                    b.Navigation("TimetableLessons");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Lesson", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.LessonHour", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("TimetableLessons");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Subject", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Lessons");

                    b.Navigation("TimetableLessons");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Teacher", b =>
                {
                    b.Navigation("Class");

                    b.Navigation("Lessons");

                    b.Navigation("TimetableLessons");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.Tutor", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("LessonLogAPI.Models.Entities.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Student");

                    b.Navigation("Teacher");

                    b.Navigation("Tutor");
                });
#pragma warning restore 612, 618
        }
    }
}
